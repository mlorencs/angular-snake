{"version":3,"sources":["./src/app/food.ts","./src/environments/environment.ts","./src/app/snake.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/grid.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { COLS, ROWS } from \"./grid\";\n\nimport { Position } from \"./position\";\n\n/**\n * Food Class.\n */\nexport class Food {\n    // VARIABLES\n\n    /**\n     * Food position\n     */\n    position: Position | null;\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     *\n     * Initializes food position.\n     */\n    constructor() {\n        this.position = null;\n    }\n\n    // METHODS\n\n    /**\n     * Generates a random food position.\n     * @param snakePosition - current snake position\n     * @param numberOfRows - grid's number of rows\n     * @param numberOfColumns - grid's number of columns\n     */\n    generatePosition = (snakePosition: Position[]): void => {\n        let isPositionGenerated = false;\n        let randomRow = 0;\n        let randomCol = 0;\n\n        while (!isPositionGenerated) {\n            randomRow = Math.floor(Math.random() * (ROWS - 1)); // generate a random row between 0 and number of rows (9)\n            randomCol = Math.floor(Math.random() * (COLS - 1)); // generate a random column between 0 and number of columns (16)\n\n            for (let index = 0; index < snakePosition.length; index++) {\n                // Food cannot be generated inside the snake\n                if (\n                    snakePosition[index].row === randomRow &&\n                    snakePosition[index].col === randomCol\n                ) {\n                    break;\n                } else if (index === snakePosition.length - 1) {\n                    isPositionGenerated = true;\n                }\n            }\n        }\n\n        this.position = {\n            row: randomRow,\n            col: randomCol,\n        };\n    };\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Position } from \"./position\";\n\ntype Direction = \"right\" | \"down\" | \"left\" | \"up\";\n\n/**\n * Snake Class.\n */\nexport class Snake {\n    // VARIABLES\n\n    /**\n     * Snake's starting position on the grid.\n     */\n    startingPosition: Position[];\n\n    /**\n     * Snake's current position on the grid.\n     */\n    currentPosition: Position[];\n\n    /**\n     * Snake's direction.\n     */\n    direction: Direction;\n\n    /**\n     * Snake's movement speed.\n     */\n    speed: number;\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     *\n     * Initializes snake's position, length, direction and speed.\n     */\n    constructor() {\n        // Snake starting length is 2\n        //\n        // First array element is the snake's tail\n        // Last array element is the snake's head\n        const startingPosition: Position[] = [\n            {\n                row: 0,\n                col: 0,\n            },\n            {\n                row: 0,\n                col: 1,\n            },\n        ];\n\n        this.startingPosition = [...startingPosition];\n        this.currentPosition = [...startingPosition];\n        this.direction = \"right\";\n        this.speed = 0.1;\n    }\n\n    // METHODS\n\n    /**\n     * Resets necessary snake's properties back to the initial values.\n     */\n    reset = (): void => {\n        this.currentPosition = [...this.startingPosition];\n        this.direction = \"right\";\n        this.speed = 0.1;\n    };\n\n    /**\n     * Moves snake to the right, removes snake's tail and returns it.\n     */\n    moveRight = (): Position => {\n        this.currentPosition.push({\n            row: this.currentPosition[this.currentPosition.length - 1].row,\n            col: this.currentPosition[this.currentPosition.length - 1].col + 1,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake down, removes snake's tail and returns it.\n     */\n    moveDown = (): Position => {\n        this.currentPosition.push({\n            row: this.currentPosition[this.currentPosition.length - 1].row + 1,\n            col: this.currentPosition[this.currentPosition.length - 1].col,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake to the left, removes snake's tail and returns it.\n     */\n    moveLeft = (): Position => {\n        this.currentPosition.push({\n            row: this.currentPosition[this.currentPosition.length - 1].row,\n            col: this.currentPosition[this.currentPosition.length - 1].col - 1,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake up, removes snake's tail and returns it.\n     */\n    moveUp = (): Position => {\n        this.currentPosition.push({\n            row: this.currentPosition[this.currentPosition.length - 1].row - 1,\n            col: this.currentPosition[this.currentPosition.length - 1].col,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Makes snake to grow longer.\n     */\n    grow = (): void => {\n        let direction: Direction = \"right\"; // in which direction snake's end is moving\n\n        // Snake's end\n        const tail = this.currentPosition[0];\n        const tailNeighbor = this.currentPosition[1];\n\n        // Snake's end moving horizontally\n        if (tail.row === tailNeighbor.row) {\n            // Snake's end moving left\n            if (tail.col > tailNeighbor.col) {\n                direction = \"left\";\n            }\n        }\n        // Snake's end moving vertically\n        else if (tail.col === tailNeighbor.col) {\n            // Snake's end moving up\n            if (tail.row < tailNeighbor.row) {\n                direction = \"up\";\n            }\n            // Snake's end moving down\n            else {\n                direction = \"down\";\n            }\n        }\n\n        switch (direction) {\n            case \"down\":\n                this.currentPosition.unshift({\n                    row: this.currentPosition[0].row - 1,\n                    col: this.currentPosition[0].col,\n                });\n\n                break;\n            case \"left\":\n                this.currentPosition.unshift({\n                    row: this.currentPosition[0].row,\n                    col: this.currentPosition[0].col + 1,\n                });\n\n                break;\n            case \"up\":\n                this.currentPosition.unshift({\n                    row: this.currentPosition[0].row + 1,\n                    col: this.currentPosition[0].col,\n                });\n\n                break;\n            default:\n                this.currentPosition.unshift({\n                    row: this.currentPosition[0].row,\n                    col: this.currentPosition[0].col - 1,\n                });\n        }\n    };\n}\n","import { COLS, Grid, ROWS } from \"./grid\";\nimport { Component, ElementRef, ViewChild } from \"@angular/core\";\n\nimport { Food } from \"./food\";\nimport { Position } from \"./position\";\nimport { Snake } from \"./snake\";\nimport { interval } from \"rxjs\";\n\nconst INITIAL_INTERVAL = 850; // TODO: snake's speed\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.scss\"],\n})\nexport class AppComponent {\n    title: string;\n    buttonState: string;\n    highestScore: number;\n    lastScore: number;\n    currentScore: number;\n    isGameRunning: boolean;\n    grid: Grid;\n    snake: Snake;\n    food: Food;\n\n    @ViewChild(\"app\") app: ElementRef | undefined = undefined;\n\n    constructor() {\n        this.title = \"Angular Snake Game\";\n        this.buttonState = \"Start Game\";\n        this.highestScore = 0;\n        this.lastScore = 0;\n        this.currentScore = 0;\n        this.isGameRunning = false;\n        this.grid = new Grid();\n        this.snake = new Snake();\n        this.food = new Food();\n\n        // Expand to have the correct amount of rows\n        for (let row = 0; row < ROWS; row++) {\n            this.grid.values.push([]);\n        }\n\n        // Expand all rows to have the correct amount of columns\n        for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                this.grid.values[row].push(\" \");\n            }\n        }\n    }\n\n    ngOnInit(): void {}\n\n    ngAfterViewInit(): void {\n        if (this.app) {\n            this.app.nativeElement.focus(); // focus the div so the keys get registered\n        }\n    }\n\n    /**\n     * Resets grid and snake's properties.\n     */\n    reset = (): void => {\n        for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                this.grid.values[row][col] = \" \";\n            }\n        }\n\n        this.snake.reset();\n    };\n\n    /**\n     * Renders snake on the grid.\n     * @param snakePosition - snake's position on the grid\n     */\n    renderSnake = (snakePosition: Position[]): void => {\n        for (let index = 0; index < snakePosition.length; index++) {\n            this.grid.values[snakePosition[index].row][snakePosition[index].col] = \"P\";\n        }\n    };\n\n    /**\n     * Renders food on the grid.\n     * @param snakePosition - snake's position on the grid\n     */\n    renderFood = (snakePosition: Position[]): void => {\n        this.food.generatePosition(snakePosition);\n\n        if (this.food.position !== null) {\n            this.grid.values[this.food.position.row][this.food.position.col] = \"X\";\n        }\n    };\n\n    /**\n     * Button click event handler.\n     *\n     * Either starts the game or restarts the game.\n     *\n     * Game's main functionality can be found here.\n     */\n    onStart = (): void => {\n        if (this.buttonState === \"Start Game\" || this.buttonState === \"Game Over - Restart Game\") {\n            if (this.buttonState === \"Game Over - Restart Game\") {\n                this.reset();\n            }\n\n            this.isGameRunning = true;\n            this.buttonState = \"In Progress\";\n            this.currentScore = 0;\n\n            this.renderSnake(this.snake.startingPosition);\n            this.renderFood(this.snake.startingPosition);\n\n            // TODO: snake's speed\n            const game = interval(INITIAL_INTERVAL).subscribe(() => {\n                let { row, col } =\n                    this.snake.currentPosition[this.snake.currentPosition.length - 1]; // snake's head\n\n                // SNAKE'S MOVEMENT SECTION\n\n                switch (this.snake.direction) {\n                    case \"down\":\n                        if (row + 1 < ROWS) {\n                            const snakeTail = this.snake.moveDown();\n\n                            this.grid.values[snakeTail.row][snakeTail.col] = \" \";\n                        } else {\n                            this.isGameRunning = false;\n                        }\n\n                        break;\n                    case \"left\":\n                        if (col > 0) {\n                            const snakeTail = this.snake.moveLeft();\n\n                            this.grid.values[snakeTail.row][snakeTail.col] = \" \";\n                        } else {\n                            this.isGameRunning = false;\n                        }\n\n                        break;\n                    case \"up\":\n                        if (row > 0) {\n                            const snakeTail = this.snake.moveUp();\n\n                            this.grid.values[snakeTail.row][snakeTail.col] = \" \";\n                        } else {\n                            this.isGameRunning = false;\n                        }\n\n                        break;\n                    default:\n                        if (col + 1 < COLS) {\n                            const snakeTail = this.snake.moveRight();\n\n                            this.grid.values[snakeTail.row][snakeTail.col] = \" \";\n                        } else {\n                            this.isGameRunning = false;\n                        }\n                }\n\n                ({ row, col } = this.snake.currentPosition[this.snake.currentPosition.length - 1]);\n\n                // Check if snake has not eaten itself\n                for (let index = 0; index < this.snake.currentPosition.length - 1; index++) {\n                    if (\n                        row === this.snake.currentPosition[index].row &&\n                        col === this.snake.currentPosition[index].col\n                    ) {\n                        this.isGameRunning = false;\n\n                        break;\n                    }\n                }\n\n                if (this.isGameRunning) {\n                    // SNAKE EATS FOOD SECTION\n\n                    this.renderSnake(this.snake.currentPosition);\n\n                    if (this.food.position !== null) {\n                        if (this.food.position.row === row && this.food.position.col === col) {\n                            this.currentScore++;\n\n                            this.snake.grow();\n\n                            this.renderSnake(this.snake.currentPosition);\n\n                            this.renderFood(this.snake.currentPosition);\n                        }\n                    }\n                } else {\n                    // GAME OVER SECTION\n\n                    this.buttonState = \"Game Over - Restart Game\";\n\n                    if (this.currentScore > this.highestScore) {\n                        this.highestScore = this.currentScore;\n                    }\n\n                    this.lastScore = this.currentScore;\n\n                    game.unsubscribe();\n                }\n            });\n        }\n    };\n\n    // Direction change\n    //\n    // Snake can only go head first. Snake\n    // cannot go in reverse.\n    //\n    // BUG: Snake can eat itself by changing\n    // directions too quickly.\n    onKeyDown = (event: KeyboardEvent): void => {\n        if (this.isGameRunning) {\n            switch (event.key) {\n                case \"ArrowRight\":\n                    if (this.snake.direction === \"down\" || this.snake.direction === \"up\") {\n                        this.snake.direction = \"right\";\n                    }\n\n                    break;\n                case \"ArrowDown\":\n                    if (this.snake.direction === \"right\" || this.snake.direction === \"left\") {\n                        this.snake.direction = \"down\";\n                    }\n\n                    break;\n                case \"ArrowLeft\":\n                    if (this.snake.direction === \"down\" || this.snake.direction === \"up\") {\n                        this.snake.direction = \"left\";\n                    }\n\n                    break;\n                case \"ArrowUp\":\n                    if (this.snake.direction === \"right\" || this.snake.direction === \"left\") {\n                        this.snake.direction = \"up\";\n                    }\n\n                    break;\n                default:\n                    return;\n            }\n        }\n    };\n}\n","<div class=\"app\" #app tabindex=\"0\" (keydown)=\"onKeyDown($event)\">\n    <div class=\"header\">\n        <div class=\"title\">{{ title }}</div>\n        <div class=\"score-container\">\n            <div class=\"score\">\n                Highest Score: <span class=\"counter\">{{ highestScore }}</span>\n            </div>\n            <div class=\"score\">\n                Last Score: <span class=\"counter\">{{ lastScore }}</span>\n            </div>\n            <div class=\"score\">\n                Current Score: <span class=\"counter\">{{ currentScore }}</span>\n            </div>\n        </div>\n        <button\n            class=\"button {{\n                buttonState === 'Start Game'\n                    ? 'start'\n                    : buttonState === 'In Progress'\n                    ? 'in-progress'\n                    : 'game-over'\n            }}\"\n            (click)=\"onStart()\"\n        >\n            {{ buttonState }}\n        </button>\n    </div>\n    <!-- \"grid.height + 2\" fixes design error -->\n    <div class=\"grid\" [ngStyle]=\"{ 'width.px': grid.width, 'height.px': grid.height + 2 }\">\n        <div\n            class=\"grid-rows\"\n            [ngStyle]=\"{ 'height.px': grid.blockHeight }\"\n            *ngFor=\"let rows of grid.values; let row = index\"\n        >\n            <div\n                class=\"grid-columns\"\n                [ngStyle]=\"{ 'width.px': grid.blockWidth }\"\n                *ngFor=\"let columns of rows; let column = index\"\n            >\n                <div class=\"field empty\" *ngIf=\"grid.values[row][column] === ' '\"></div>\n                <div class=\"field snake\" *ngIf=\"grid.values[row][column] === 'P'\"></div>\n                <div class=\"field food\" *ngIf=\"grid.values[row][column] === 'X'\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n","type GridValue = \"X\" | \"P\" | \" \";\n\n// CONSTANTS\n\n// The following values are in pixels\nconst WIDTH = 850;\nconst HEIGHT = 500;\nconst BLOCK_WIDTH = 50;\nconst BLOCK_HEIGHT = 50;\n\nexport const ROWS = HEIGHT / BLOCK_HEIGHT;\nexport const COLS = WIDTH / BLOCK_WIDTH;\n\n/**\n * Grid Class.\n */\nexport class Grid {\n    // CLASS VARIABLES\n\n    /**\n     * Grid's width.\n     */\n    width: number;\n\n    /**\n     * Grid's height.\n     */\n    height: number;\n\n    /**\n     * Grid's one block width.\n     */\n    blockWidth: number;\n\n    /**\n     * Grid's one block height.\n     */\n    blockHeight: number;\n\n    /**\n     * Two dimensional array represented as a grid with custom values inside it.\n     */\n    values: GridValue[][];\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     *\n     * Initializes grid.\n     */\n    constructor() {\n        this.width = WIDTH;\n        this.height = HEIGHT;\n        this.blockWidth = BLOCK_WIDTH;\n        this.blockHeight = BLOCK_HEIGHT;\n        this.values = [];\n    }\n}\n","import { AppComponent } from \"./app.component\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [BrowserModule],\n    providers: [],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}